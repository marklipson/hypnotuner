package com.marklipson.musicgen;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JSlider;
import javax.swing.JToggleButton;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class HypnoTuner
{
  String infoMessage = 
      "HypnoTuner is a trance/meditation tone generator.\n\n" +
      "Two different tones slowly alternate between the left and right channels\n" +
      "of your headphones or sound system.  When listening through headphones,\n" +
      "a mild interference pattern between the two frequencies should result,\n" +
      "causing some mild and hopefully pleasant brain-jiggling.\n" +
      "\n" +
      "1) put on your headphones\n" +
      "2) adjust 'A' to a frequency you like\n" +
      "3) adjust other sliders one at a time, listening carefully, until it feels right\n" +
      "4) groove on it for a while\n" +
      "\n" +
      "Suggestions, etc: http://helianthusinc.com/contact.php";
  // sampling rate, samples per second
  int rate = 44100;
  // - multiplier for sample number to get a 1Hz wave
  double dt1;
  //
  long tStart = System.nanoTime();
  long tOffset = 0;
  // duration of fade-in / fade-out
  double fade_s = 10;
  // play position since start (samples)
  long n = 0;
  // number of harmonics that are controllable
  int nHarmonics = 7;
  // mute
  SmoothValue muted = new SmoothValue( 0.4 );
  // output
  Speakers speakers;
  JFrame frame;
  JSlider toneA;
  JSlider diffBlo, diffBhi;
  JSlider beatCycle;
  JSlider balCycle;
  JSlider harmonics[];
  
  SmoothValue vA, vBlo, vBhi, vBalCycle, vBeatCycle;
  SmoothValue vH[];
  
  JPanel lightBox;
  Set<PersistedValue> persisted = new HashSet<PersistedValue>();
  
  class PersistedValue
  {
    String name;
    JSlider target;
    public PersistedValue( String name, JSlider target )
    {
      this.name = name;
      this.target = target;
    }
    void save( Properties props )
    {
      int value = target.getValue();
      props.setProperty( name, String.valueOf( value ) );
    }
    void load( Properties props )
    {
      String strValue = props.getProperty( name );
      if (strValue == null)
        return;
      if (! strValue.matches( "\\-?\\d+" ))
        return;
      target.setValue( Integer.parseInt( strValue ) );
    }
  }

  /**
   * Time for signal currently being generated.
   */
  double tGen()
  {
    return (double)n / rate;
  }
  /**
   * Time in signal currently being played.
   */
  double tReal()
  {
    long tN = System.nanoTime() - tStart + tOffset;
    return tN/1e9;
  }
  
  void pulseLight()
  {
    new Thread()
    {
      void update()
      {
        //System.out.println( tOffset );
        double tBal = track_balance.retrieve();
        double tBeat = track_beat.retrieve();
        setLevel( -Math.sin( tBeat ), Math.sin( tBal ) );
      }
      public void run()
      {
        while (! Thread.interrupted())
        {
          try
          {
            Thread.sleep( 10 );
            update();
          }
          catch( InterruptedException x )
          {
            break;
          }
        }
      }
    }.start();
  }
  void setLevel( double pos, double p2 )
  {
    Graphics g = lightBox.getGraphics();
    int w = lightBox.getWidth();
    int h = lightBox.getHeight();
    int h1 = 50;//(w/8 - 20);
    int h0 = w - h1 - 100;
    int r1 = 11;
    int r2 = 9;
    g.setColor( lightBox.getBackground() );
    g.fillRect( 0, 0, w, h );
    g.setColor( new Color(248,248,248) );
    g.fillRoundRect( h0-h1-r1/2, 0, h1*2+r1, h, 6, 6 );
    int x = (int)(h0 + h1 * pos);
    g.setColor( new Color(192,224,240) );
    g.fillOval( x - r1/2, h/4 - r1/2, r1, r1 );
    //
    int x2 = (int)(h0 + h1 * p2);
    g.setColor( new Color(192,240,192) );
    g.fillOval( x2 - r2/2, h*3/4 - r2/2, r2, r2 );
  }
  
  class SmoothValue
  {
    double vNow = Double.NaN;
    double vTarget;
    double tPrev;
    double speed;
    boolean geometric;
    SmoothValue( double speed )
    {
      this( speed, true );
    }
    SmoothValue( double speed, boolean geometric )
    {
      this.speed = speed;
      this.geometric = geometric;
      tPrev = tGen();
    }
    double getValue()
    {
      double tNow = tGen();
      double tE = tNow - tPrev;
      tPrev = tNow;
      double approach = 1 - Math.pow( speed, tE );
      /*
      if (geometric)
      {
        double delta = vTarget / vNow;
        vNow = vNow * delta * approach;
      }
      else
      */
      {
        double delta = vTarget - vNow;
        vNow += delta * approach;
      }
      return vNow;
    }
    void setValue( double v )
    {
      if (Double.isNaN( vNow ))
        vNow = v;
      vTarget = v;
    }
  }

  HypnoTuner()
  {
    dt1 = Math.PI * 2 / rate;
  }
  public void setupSound() throws Exception
  {
    System.out.println( "Acquiring audio line (e.g. speakers)" );
    speakers = new Speakers( rate );
  }
  void buildFrame()
  {
    frame = new JFrame( "HypnoTuner" );
    frame.setSize( 1000, 400 );
    JRootPane root = frame.getRootPane();
    root.setLayout( new GridLayout( 11 + nHarmonics, 1 ) );
    toneA = new JSlider( 2500, 5500, 3723 );
    toneA.setToolTipText( "base frequency" );
    diffBlo = new JSlider( -2200, 4000, 832 );
    diffBhi = new JSlider( -2200, 4000, 1072 );
    diffBlo.setToolTipText( "secondary frequency varies around base frequency by this much on the low end" );
    diffBhi.setToolTipText( "secondary frequency varies around base frequency by this much on the high end" );
    balCycle = new JSlider( -1500, 5000, 2861 );
    beatCycle = new JSlider( -1500, 5000, 3000 );
    balCycle.setToolTipText( "The base and secondary frequencies alternate between the left and right channels.  This parameter controls how long this cycle is." );
    beatCycle.setToolTipText( "The secondary frequency varies between the low and high values in a cycle lasting this many seconds." );
    harmonics = new JSlider[nHarmonics];
    harmonics[0] = new JSlider( 0, 100000, 90000 );
    harmonics[0].setToolTipText( "Percentage of 1st harmonic to include in both base and secondary tones." );
    harmonics[1] = new JSlider( 0, 100000, 43928 );
    harmonics[1].setToolTipText( "Percentage of 2nd harmonic to include in both base and secondary tones." );
    harmonics[2] = new JSlider( 0, 100000, 3000 );
    harmonics[2].setToolTipText( "Percentage of 3rd harmonic to include in both base and secondary tones." );
    for (int nH=3; nH < nHarmonics; nH++)
    {
      harmonics[nH] = new JSlider( 0, 100000, 0 );
      harmonics[nH].setToolTipText( "Percentage of " + (nH+1) + "th harmonic." );
      // TODO different color
    }
    vA = new SmoothValue( 0.4 );
    vBlo = new SmoothValue( 0.4, false );
    vBhi = new SmoothValue( 0.4, false );
    vBalCycle = new SmoothValue( 0.4 );
    vBeatCycle = new SmoothValue( 0.4 );
    root.add( decorateSlider( "A: (hz)", toneA, 0.001, true, vA ) );
    root.add( decorateSlider( "B-delta-lo: (hz)", diffBlo, 0.001, true, vBlo ) );
    root.add( decorateSlider( "B-delta-hi: (hz)", diffBhi, 0.001, true, vBhi ) );
    root.add( decorateSlider( "beatCycle: (s)", beatCycle, 0.001, true, vBeatCycle ) );
    root.add( decorateSlider( "balanceCycle: (s)", balCycle, 0.001, true, vBalCycle ) );
    lightBox = new JPanel();
    vH = new SmoothValue[ harmonics.length ];
    for (int nh=0; nh < harmonics.length; nh++)
    {
      vH[nh] = new SmoothValue( 0.4, false );
      root.add( decorateSlider( "h(" + (nh+1) + "):", harmonics[nh], 0.001, false, vH[nh] ) );
    }
    root.add( new JLabel("") );
    root.add( new JLabel("") );
    Box controls = Box.createHorizontalBox();
    controls.add( Box.createHorizontalStrut( 10 ) );
    // SAVE
    JButton btn = new JButton( "save" );
    btn.addActionListener( new ActionListener()
    {
      @Override
      public void actionPerformed( ActionEvent e )
      {
        Properties props = getSaveState();
        JFileChooser c = new JFileChooser();
        if (c.showSaveDialog( frame ) == JFileChooser.APPROVE_OPTION)
        {
          File saveAs = c.getSelectedFile();
          if (saveAs.exists())
            if (JOptionPane.showConfirmDialog( frame, "File exists, overwrite?" ) != JOptionPane.OK_OPTION)
              return;
          try
          {
            FileWriter w = new FileWriter( saveAs );
            props.store( w, "" );
            w.close();
          }
          catch( Exception x )
          {
            JOptionPane.showMessageDialog( frame, x );
          }
        }
      }
    });
    controls.add( btn );
    // LOAD
    btn = new JButton( "load" );
    btn.addActionListener( new ActionListener()
    {
      @Override
      public void actionPerformed( ActionEvent e )
      {
        JFileChooser c = new JFileChooser();
        if (c.showOpenDialog( frame ) == JFileChooser.APPROVE_OPTION)
        {
          File loadFrom = c.getSelectedFile();
          try
          {
            FileReader r = new FileReader( loadFrom );
            Properties props = new Properties();
            props.load( r );
            r.close();
            setSaveState( props );
          }
          catch( Exception x )
          {
            JOptionPane.showMessageDialog( frame, x );
          }
        }
      }
    });
    controls.add( btn );
    JButton info = new JButton( "info" );
    info.addActionListener( new ActionListener()
    {
      @Override
      public void actionPerformed( ActionEvent e )
      {
        JOptionPane.showMessageDialog( frame, infoMessage, "HypnoTuner", JOptionPane.PLAIN_MESSAGE );
      }
    });
    controls.add( info );
    // MUTE
    final JToggleButton mute = new JToggleButton( "mute" );
    mute.addActionListener( new ActionListener()
    {
      @Override
      public void actionPerformed( ActionEvent e )
      {
        muted.setValue( mute.isSelected() ? 0 : 1 );
      }
    });
    muted.setValue( 1 );
    controls.add( mute );
    controls.add( lightBox );
    root.add( controls );
    // open it
    frame.setVisible( true );
    // make it closable
    frame.addWindowListener( new WindowAdapter() {
      @Override
      public void windowClosing( WindowEvent e )
      {
        tFade = tGen();
        new Thread("exit")
        {
          public void run()
          {
            try
            {
              Thread.sleep( 3000 );
            }
            catch( Exception x )
            {
            }
            System.exit( 0 );
          }
        }.start();
      }
    });
  }
  JComponent decorateSlider( String label, final JSlider slider, final double factor, final boolean log, final SmoothValue v )
  {
    Box box = Box.createHorizontalBox();
    box.setBorder( BorderFactory.createEmptyBorder( 0/*T*/, 10/*L*/, 0/*B*/, 10/*R*/ ) );
    JLabel lbl = new JLabel( label );
    lbl.setPreferredSize( new Dimension( 120, lbl.getSize().height ) );
    box.add( lbl );
    final JLabel showValue = new JLabel( "..." );
    showValue.setPreferredSize( new Dimension( 60, showValue.getSize().height ) );
    box.add( slider );
    box.add( showValue );
    ChangeListener updateValue = new ChangeListener()
    {
      @Override
      public void stateChanged( ChangeEvent evt )
      {
        int vSlider = slider.getValue();
        double value = vSlider * factor;
        if (log)
          value = Math.exp( value );
        String str = String.format( "%.2f", value );
        showValue.setText( str );
        v.setValue( value );
      }
    };
    slider.addChangeListener( updateValue );
    updateValue.stateChanged( null );
    String tag = label;
    tag = tag.replaceFirst( "([^:]*).*", "$1" );
    tag = tag.replaceFirst( "(.*)\\((.*)\\)", "$1_$2" );
    persisted.add( new PersistedValue( tag, slider ) );
    return box;
  }
  protected Properties getSaveState()
  {
    Properties props = new Properties();
    for (PersistedValue v : persisted)
      v.save( props );
    return props;
  }
  protected void setSaveState( Properties props )
  {
    for (PersistedValue v : persisted)
      v.load( props );
  }

  private double waveform( double t )
  {
    double tot = 0;
    for (int nh=0; nh < vH.length; nh++)
      tot += vH[nh].getValue();
    if (tot == 0)
      tot = 1;
    double v = 0;
    for (int nh=0; nh < vH.length; nh++)
    {
      double h = Math.sin( t * (nh+1) );
      double level = vH[nh].getValue() / tot;
      v += h * level;
    }
    return v;
  }
    
  /**
   * Values are not generated in real time, so we save some of them, to know what they actually are in real time.
   */
  class TrackValue
  {
    double list[] = new double[ 400 ];
    int index( double t )
    {
      long tN = (long)(t / 100);
      return (int)(tN % list.length);
    }
    void store( double v )
    {
      double t = tGen();
      list[ index(t) ] = v;
    }
    double retrieve()
    {
      double t = tReal();
      return list[ index(t) ];
    }
  }
  // - time values
  double tL = 0, tR = 0;
  double tBeat = 0;
  double tBal = 0;
  double tFade = 0;
  TrackValue track_balance = new TrackValue();
  TrackValue track_beat = new TrackValue();

  void playSome() throws Exception
  {
    // number of seconds
    double nSeconds = 0.2;
    double maxBufferLevel = 0.5; // starts clicking on some systems below 0.3
    if (tFade > 0)
      maxBufferLevel = 5; // we can buffer as much as we like now
    int bufferDelay = 25;
    // values for loop
    // - output values
    float[] vL = new float[ (int)(rate * nSeconds) ];
    float[] vR = new float[ (int)(rate * nSeconds) ];
    while (speakers.getBufferLevel() > maxBufferLevel)
    {
      Thread.sleep( bufferDelay );
      //System.out.println( "d: " + speakers.getBufferLevel() );
    }
    {
      long tReal = System.nanoTime() - tStart;
      long tGen = (long)((tGen() - speakers.getBufferLevel()) * 1e9);
      tOffset = tGen - tReal;
    }
    for (int index=0; index < vL.length; index++, n++)
    {
      // cycle tone B between hi and lo, every (beatCycle)
      double beatCycle = vBeatCycle.getValue();
      tBeat += dt1 / beatCycle;
      track_beat.store( tBeat );
      double slowVariation = Math.sin( tBeat );
      // base frequency
      double fL = vA.getValue();
      tL += fL * dt1;
      double L = waveform( tL );
      // - range of frequency delta for right channel
      double lowBeatHz = vBlo.getValue();
      double highBeatHz = vBhi.getValue();
      double midBeatHz = (lowBeatHz + highBeatHz) / 2;
      double rBeat = highBeatHz - midBeatHz;
      double fR = fL + midBeatHz + rBeat * slowVariation;
      tR += fR * dt1;
      double R = waveform( tR );
      // - swing balance back and forth in a cycle lasting this many seconds
      double balanceSwingCycle = vBalCycle.getValue();
      tBal += dt1 / balanceSwingCycle;
      track_balance.store( tBal );
      double bL = (Math.sin( tBal ) + 1) / 2;
      double bR = 1 - bL;
      vL[index] = (float)(L * bL + R * bR);
      vR[index] = (float)(R * bL + L * bR);
      // fade in/out
      double tS = tGen();
      double fade = softenEdges( tS, fade_s );
      if (tFade > 0)
      {
        double tNow = (double)n/rate;
        double tF = tNow - tFade;
        fade *= Math.pow( 0.15, tF );
      }
      fade *= muted.getValue();
      vL[index] *= fade;
      vR[index] *= fade;
    }
    //System.out.println( "first=" + vL[0] + ", last=" + vL[vL.length-1] );
    speakers.play( vL, vR );
  }
  
  /**
   * t == 0 to 1  (0 = start, 1 = end)
   * width == duration of fade-in/out, i.e. 0.01
   * return == 0 to 1 (0 = silent, 1 = full volume)
   */
  private static double softenEdges( double t, double width )
  {
    if (t < width)
      return t / width;
    return 1;
  }
  
  private void playContinuously()
  {
    Thread thread = new Thread("play")
    {
      @Override
      public void run()
      {
        while (! Thread.interrupted())
        {
          try
          {
            playSome();
          }
          catch( InterruptedException x )
          {
            break;
          }
          catch( Exception x )
          {
            x.printStackTrace( System.err );
          }
        }
      }
    };
    thread.start();
  }
  public static void main( String[] args )
  {
    try
    {
      System.out.println( "HypnoTuner..." );
      HypnoTuner tuner = new HypnoTuner();
      tuner.buildFrame();
      tuner.setupSound();
      System.out.println( "starting" );
      tuner.playContinuously();
      tuner.pulseLight();
    }
    catch( Exception x )
    {
      x.printStackTrace( System.err );
    }
  }
}
